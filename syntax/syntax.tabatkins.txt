// Grammar
Diagram(
    Comment('NutmegUnit'),
    ZeroOrMore(NonTerminal('Definition'))
)

// Definition - TODO, add attributes.
Diagram(
    Comment('Definition'),
    Choice(0,
        NonTerminal('Bind'),
        NonTerminal('Def'),
        NonTerminal('Class')
    )
)

// Bind
Diagram(
    Comment('Bind'),
    Sequence(
        NonTerminal('Id'),
        Terminal(':='),
        NonTerminal('E')
    )
)

// Pattern - TO DO! 
Diagram(
    Comment('Pattern'),
    NonTerminal('Id')
)

// Def
Diagram(
    Comment('Def'),
    Sequence(
        Terminal('def'),
        NonTerminal('Apply'),
        Terminal('/=>>|:/'),
        NonTerminal('S'),
        Terminal('/end|enddef/')
    )
)

// Class - fix =>>
Diagram(
    Comment('Class'),
    Sequence(
        Terminal('class'),
        NonTerminal('Id'),
        Terminal('/:|=>>/'),
        ZeroOrMore(
            Sequence(
                Terminal('slot'),
                NonTerminal('Id'),
                Terminal('='),
                NonTerminal('E'),
                Terminal(';')
            )
        ),
        ZeroOrMore(NonTerminal('Definition')),
        Terminal('/end|endclass/')
    )
)

// Statements
Diagram(
    Comment('S (Statements)'),
    Sequence(
        ZeroOrMore(
            Sequence(
                NonTerminal('E'),
                Terminal(';')
            )
        ),
        Optional(NonTerminal('Statement'))
    )
)

// Expression
Diagram(
    Comment('E (Expression)'),
    Choice(0,
        NonTerminal('Literal'),
        NonTerminal('Identifier'),
        NonTerminal('Bracketed'),
        NonTerminal('Call'),
        NonTerminal('Operator'),
        NonTerminal('If'),
        NonTerminal('For')
    )
)

// Statements
Diagram(
    Comment('S'),
    Sequence(
        ZeroOrMore(
            Sequence(
                NonTerminal('E'),
                Choice(0, Terminal(';'), Terminal('\\n'))
            )
        ),
        Optional(NonTerminal('E'))
    )
)

// Literal
Diagram(
    Comment('Literal'),
    Choice(0,
        NonTerminal('Number'),
        NonTerminal('String')
    )
)

// Bracketed
Diagram(
    Comment('Bracketed'),
    Choice(
        0,
        Sequence(
            Terminal('('),
            NonTerminal('Arguments'),
            Terminal(')')
        ),
        Sequence(
            Terminal('['),
            NonTerminal('Arguments'),
            Terminal(']')
        ),
        Sequence(
            Terminal('{'),
            NonTerminal('Arguments'),
            Terminal('}')
        )
    )
)

// Arguments
Diagram(
    Comment('Arguments'),
    Optional(
        Sequence(
            NonTerminal('E'),
            ZeroOrMore(
                Sequence(
                    Terminal(','),
                    NonTerminal('E')
                )
            )
        )
    )
)

// Call
Diagram(
    Comment('Call'),
    Choice(0,
        NonTerminal('Apply'),
        NonTerminal('Invoke')
    )
)

// Apply
Diagram(
    Comment('Apply'),
    Sequence(
        NonTerminal('E'),
        NonTerminal('Bracketed')
    )
)

// Invoke
Diagram(
    Comment('Invoke'),
    Sequence(
        Choice(0,
            Sequence(
                NonTerminal('E'),
                Terminal('.')
            ),
            Terminal('^')
        ),
        NonTerminal('identifier'),
        Optional(NonTerminal('Bracketed'))
    )
)

// Operator
Diagram(
    Comment('Operator'),
    Sequence(
        NonTerminal('E'),
        Terminal('/[-+*/]|:=|<-|<--/'),
        Optional(NonTerminal('E'))
    )
)

// If
Diagram(
    Comment('If'),
    Sequence(
        Terminal('if'),
        NonTerminal('IfCore'),
        Terminal('/end|endif/')
    )
)

// IfNot
Diagram(
    Comment('IfNot'),
    Sequence(
        Terminal('ifnot'),
        NonTerminal('IfCore'),
        Terminal('/end|endifnot/')
    )
)

// IfCore
Diagram(
    Comment('IfCore'),
    Sequence(
        NonTerminal('E'),
        Terminal('/then|:/'),
        NonTerminal('S'),
        ZeroOrMore(
            Sequence(
                Terminal('/elseif|elseifnot/'),
                NonTerminal('E'),
                Terminal('/then|:/'),
                NonTerminal('S')
            )
        ),
        Optional(
            Sequence(
                NonTerminal('else'),
                NonTerminal('S')
            )
        )
    )
)

// For
Diagram(
    Comment('For'),
    Sequence(
        Terminal('for'),
        NonTerminal('Query'),
        Terminal('/do|:/'),
        NonTerminal('S'),
        Terminal('/end|endfor/')
    )    
)
